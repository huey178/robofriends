{"version":3,"sources":["components/card.js","components/cardlist.js","components/searchbox.js","components/scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","username","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAkBeA,EAbF,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC9B,OACE,yBAAKC,UAAY,uDACf,yBAAKC,IAAM,SAASC,IAAG,+BAA4BH,KACnD,6BACA,4BAAKF,GACL,2BAAIC,MCeKK,EAtBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEpB,OACE,yBAAKJ,UAAY,MAEjBI,EAAOC,KAAI,SAACC,EAAKC,GACf,OACE,kBAAC,EAAD,CAAMC,IAAOD,EACbR,GAAMK,EAAOG,GAAGR,GACfF,SAAYO,EAAOG,GAAGV,SACtBC,MAASM,EAAOG,GAAGT,aCIXW,EAhBG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAEjC,OACE,yBAAKX,UAAY,OACjB,2BACAA,UAAY,mCACZY,KAAO,SACPC,YAAc,gBACdC,SAAYH,MCECI,EATA,SAACC,GACd,OACE,yBAAKC,MAAS,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACpEJ,EAAMK,WCmBEC,G,kBAtBb,WAAYN,GAAO,IAAD,8BAChB,+CACKO,MAAQ,CACXC,UAAU,GAHI,E,+EAOAC,EAAOC,GACvBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACL,sDAEFG,KAAKX,MAAMK,a,GAhBMQ,cCgDbC,E,YA1Cb,aAAe,IAAD,8BACZ,+CAeFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAAClB,YAAasB,EAAMC,OAAOC,SAfzC,EAAKX,MAAQ,CACXnB,OAAQ,GACRM,YAAa,IAJH,E,iFAOO,IAAD,OAClByB,MAAM,8CAA8CC,MAAK,SAAAC,GACvD,OAAOA,EAASC,UACfF,MAAK,SAAAG,GACN,EAAKX,SAAS,CAACxB,OAAQmC,S,+BASjB,IAAD,EACuBZ,KAAKJ,MAA5BnB,EADA,EACAA,OAAQM,EADR,EACQA,YACT8B,EAAiBpC,EAAOqC,QAAO,SAAAC,GACnC,OAAOA,EAAM7C,SAAS8C,cAAcC,SAASlC,EAAYiC,kBAG3D,OAAQvC,EAAOyC,OAIV,yBAAK7C,UAAU,MAChB,wBAAIA,UAAU,OAAd,eACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU3B,OAAQoC,OARpB,2C,GA5BUX,a,MCKEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MACbC,SAASC,eAAe,SDwHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.d331b726.chunk.js","sourcesContent":["import React from 'react'\n\n\n\n\nconst Card = ({username, email, id}) => {\n  return (\n    <div className = 'bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\n      <img alt = 'robots' src = {`https://robohash.org/${id}`} />\n      <div>\n      <h2>{username}</h2>\n      <p>{email}</p>\n    </div>\n    </div>\n  );\n}\n\n\nexport default Card\n","import React from 'react';\nimport Card from './card'\n\n\nconst CardList = ({ robots }) => {\n\nreturn(\n  <div className = 'tc'>\n  {\n  robots.map((user,i) => {\n    return (\n      <Card key = {i}\n      id = {robots[i].id}\n       username = {robots[i].username}\n       email = {robots[i].email}/>\n  );\n})\n}\n  </div>\n);\n\n}\n\n\n\n\nexport default CardList\n","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n\nreturn (\n  <div className = 'pa2'>\n  <input\n  className = 'pa3 ba b--green bg-lightest-blue'\n  type = 'search'\n  placeholder = 'Search Robots'\n  onChange = {searchChange}\n  />\n\n  </div>\n);\n\n}\n\nexport default SearchBox\n","import React from 'react';\n\n\nconst Scroll = (props) => {\n  return (\n    <div style = {{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\n      {props.children}\n    </div>\n  )\n}\n\n\nexport default Scroll\n","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props){\n    super();\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info){\n    this.setState({hasError: true});\n  }\n  \n  render (){\n    if(this.state.hasError) {\n      return <h1>Oops. That is not good</h1>\n    }\n    return this.props.children\n  }\n}\n\n\n\n\nexport default ErrorBoundary\n","import React, {Component} from 'react'\nimport CardList from '../components/cardlist';\nimport SearchBox from '../components/searchbox';\nimport Scroll from '../components/scroll'\nimport './App.css';\nimport ErrorBoundary from \"../components/ErrorBoundary\"\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => {\n      return response.json()\n    }).then(users => {\n      this.setState({robots: users})\n    });\n\n  }\n\n  onSearchChange = (event) => {\n    this.setState({searchfield: event.target.value})\n  }\n\n  render() {\n    const {robots, searchfield} = this.state\n    const filteredRobots = robots.filter(robot => {\n      return robot.username.toLowerCase().includes(searchfield.toLowerCase())\n    })\n\n    return !robots.length\n      ? <h1>\n          Loading\n        </h1>\n      : (<div className='tc'>\n        <h1 className='tc '>RoboFriends</h1>\n        <SearchBox searchChange={this.onSearchChange}/>\n        <Scroll>\n          <ErrorBoundary>\n          <CardList robots={filteredRobots}/>\n          </ErrorBoundary>\n        </Scroll>\n      </div>);\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\n\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>\n  ,document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}